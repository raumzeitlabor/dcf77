
image.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  00000212  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000b9  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000019d  00000000  00000000  000002eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000cb  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d7  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011d  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_7>:
  while(42){
  
  }
}

SIGNAL(SIG_OUTPUT_COMPARE1A){ //Timerinterrupt für LEDs
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  if (has_fallen == 1){
  88:	80 91 60 00 	lds	r24, 0x0060
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	59 f4       	brne	.+22     	; 0xa6 <__vector_7+0x2a>
   if (last_bit == 1){
  90:	80 91 64 00 	lds	r24, 0x0064
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	39 f4       	brne	.+14     	; 0xa6 <__vector_7+0x2a>
    signal = (signal << 1);
  98:	80 91 63 00 	lds	r24, 0x0063
  9c:	88 0f       	add	r24, r24
  9e:	80 93 63 00 	sts	0x0063, r24
    last_bit = 0;
  a2:	10 92 64 00 	sts	0x0064, r1
   }
   else
    signal = (signal << 0);  
  }
  //PORTC = signal;
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <__vector_1>:

ISR(INT0_vect){
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
      time_rising = TCNT1;
      INT0_falling();
      PORTC = 0x0F;
      break;
    case 0: //fallende Flanke hat den Interrupt ausgelöst      
      if (TCNT1 >= time_rising)
  c4:	8c b5       	in	r24, 0x2c	; 44
  c6:	9d b5       	in	r25, 0x2d	; 45
  c8:	20 91 65 00 	lds	r18, 0x0065
  cc:	30 91 66 00 	lds	r19, 0x0066
  d0:	82 17       	cp	r24, r18
  d2:	93 07       	cpc	r25, r19
  d4:	48 f0       	brcs	.+18     	; 0xe8 <__vector_1+0x36>
        time_diff = TCNT1 - time_rising;
  d6:	8c b5       	in	r24, 0x2c	; 44
  d8:	9d b5       	in	r25, 0x2d	; 45
  da:	82 1b       	sub	r24, r18
  dc:	93 0b       	sbc	r25, r19
  de:	90 93 62 00 	sts	0x0062, r25
  e2:	80 93 61 00 	sts	0x0061, r24
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <__vector_1+0x46>
      else
        time_diff = time_rising - TCNT1;
  e8:	8c b5       	in	r24, 0x2c	; 44
  ea:	9d b5       	in	r25, 0x2d	; 45
  ec:	28 1b       	sub	r18, r24
  ee:	39 0b       	sbc	r19, r25
  f0:	30 93 62 00 	sts	0x0062, r19
  f4:	20 93 61 00 	sts	0x0061, r18
      if ((time_diff > 500) && (time_diff < 3250)){
  f8:	80 91 61 00 	lds	r24, 0x0061
  fc:	90 91 62 00 	lds	r25, 0x0062
 100:	85 5f       	subi	r24, 0xF5	; 245
 102:	91 40       	sbci	r25, 0x01	; 1
 104:	8d 5b       	subi	r24, 0xBD	; 189
 106:	9a 40       	sbci	r25, 0x0A	; 10
 108:	18 f4       	brcc	.+6      	; 0x110 <__vector_1+0x5e>
        last_bit = 1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 64 00 	sts	0x0064, r24
      }
      has_fallen = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 60 00 	sts	0x0060, r24
void INT0_on(){
  GICR |= (1 << INT0);
}

void INT0_rising(){
  MCUCR |= (1 << ISC00);
 116:	85 b7       	in	r24, 0x35	; 53
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	85 bf       	out	0x35, r24	; 53
  MCUCR |= (1 << ISC01);
 11c:	85 b7       	in	r24, 0x35	; 53
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	85 bf       	out	0x35, r24	; 53
      if ((time_diff > 500) && (time_diff < 3250)){
        last_bit = 1;
      }
      has_fallen = 1;
      INT0_rising();
      PORTC = 0xF0;
 122:	80 ef       	ldi	r24, 0xF0	; 240
 124:	85 bb       	out	0x15, r24	; 21
      break;
  }
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	3f 91       	pop	r19
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <timer1_on>:

void timer1_on(){
  TCCR1B |= (1 << WGM12); //CTC Modus
 138:	8e b5       	in	r24, 0x2e	; 46
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	8e bd       	out	0x2e, r24	; 46
  TCCR1B |= (1 << CS12); // Prescaler auf 1024
 13e:	8e b5       	in	r24, 0x2e	; 46
 140:	84 60       	ori	r24, 0x04	; 4
 142:	8e bd       	out	0x2e, r24	; 46
  TCCR1B |= (1 << CS10); // Prescaler auf 1024
 144:	8e b5       	in	r24, 0x2e	; 46
 146:	81 60       	ori	r24, 0x01	; 1
 148:	8e bd       	out	0x2e, r24	; 46
  TIMSK |= (1 << OCIE1A); // Interrupt auslösen wenn CTC-Match
 14a:	89 b7       	in	r24, 0x39	; 57
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	89 bf       	out	0x39, r24	; 57
  OCR1A = 15624; //Schwellenwert für CTC -> Interrupt 1Hz
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	9d e3       	ldi	r25, 0x3D	; 61
 154:	9b bd       	out	0x2b, r25	; 43
 156:	8a bd       	out	0x2a, r24	; 42
}
 158:	08 95       	ret

0000015a <main>:
uint8_t has_fallen; //ein bool, ob er gerade gefallen ist oder nicht
uint8_t last_bit; //hier steht die 1 wenn wir eine gefunden haben.

int main(void)
{
  DDRC = 0xFF; //Port C auf Output setzen
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	84 bb       	out	0x14, r24	; 20
  timer1_on(); //schalte den Timer für den 1Hz Interrupt an 
 15e:	0e 94 9c 00 	call	0x138	; 0x138 <timer1_on>
  TIMSK |= (1 << OCIE1A); // Interrupt auslösen wenn CTC-Match
  OCR1A = 15624; //Schwellenwert für CTC -> Interrupt 1Hz
}

void INT0_on(){
  GICR |= (1 << INT0);
 162:	8b b7       	in	r24, 0x3b	; 59
 164:	80 64       	ori	r24, 0x40	; 64
 166:	8b bf       	out	0x3b, r24	; 59
}

void INT0_rising(){
  MCUCR |= (1 << ISC00);
 168:	85 b7       	in	r24, 0x35	; 53
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	85 bf       	out	0x35, r24	; 53
  MCUCR |= (1 << ISC01);
 16e:	85 b7       	in	r24, 0x35	; 53
 170:	82 60       	ori	r24, 0x02	; 2
 172:	85 bf       	out	0x35, r24	; 53
{
  DDRC = 0xFF; //Port C auf Output setzen
  timer1_on(); //schalte den Timer für den 1Hz Interrupt an 
  INT0_on();
  INT0_rising();
  sei();
 174:	78 94       	sei
 176:	ff cf       	rjmp	.-2      	; 0x176 <main+0x1c>

00000178 <INT0_on>:
  TIMSK |= (1 << OCIE1A); // Interrupt auslösen wenn CTC-Match
  OCR1A = 15624; //Schwellenwert für CTC -> Interrupt 1Hz
}

void INT0_on(){
  GICR |= (1 << INT0);
 178:	8b b7       	in	r24, 0x3b	; 59
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	8b bf       	out	0x3b, r24	; 59
}
 17e:	08 95       	ret

00000180 <INT0_rising>:

void INT0_rising(){
  MCUCR |= (1 << ISC00);
 180:	85 b7       	in	r24, 0x35	; 53
 182:	81 60       	ori	r24, 0x01	; 1
 184:	85 bf       	out	0x35, r24	; 53
  MCUCR |= (1 << ISC01);
 186:	85 b7       	in	r24, 0x35	; 53
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	85 bf       	out	0x35, r24	; 53
  }
 18c:	08 95       	ret

0000018e <INT0_falling>:
  
void INT0_falling(){
  MCUCR |= (0 << ISC00);
 18e:	85 b7       	in	r24, 0x35	; 53
 190:	85 bf       	out	0x35, r24	; 53
  MCUCR |= (1 << ISC01);
 192:	85 b7       	in	r24, 0x35	; 53
 194:	82 60       	ori	r24, 0x02	; 2
 196:	85 bf       	out	0x35, r24	; 53
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
